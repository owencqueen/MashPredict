geom_point(data=williamette, aes(PC1, PC2), color="red")
# Inspect samples with large difference
outliers<- lat_pred %>% filter(Diff> 2) %>% pull(Geno)
# Find outliers
outliers<- samples %>% filter(Geno %in% outliers)
outliers
williamette
williamette %>% filter(grepl('GW', Geno))
williamette %>% filter(!grepl('GW', Geno))
nonGW_will<- williamette %>% filter(!grepl('GW', Geno))
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2), color="red")
GW_will<- williamette %>% filter(grepl('GW', Geno))
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2), color="red") +
geom_point(data=GW_will, aes(PC1, PC2), color="skyblue")
?geom_point
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2), color="red", show.legend = T) +
geom_point(data=GW_will, aes(PC1, PC2), color="skyblue", show.legend = T)
?aes
### Plot faceted scatter for all GW river systems
gw_samples<- samples %>% filter(grepl("GW", Geno))
head(gw_samples)
unique(gw_samples$River)
unique(samples$River)
gw_samples %>% pull(River) %>% distinct()
gw_samples %>% pull(River) %>% unique()
rivers<- samples %>% filter(River %in% gw_rivers)
gw_rivers<- gw_samples %>% pull(River) %>% unique()
rivers<- samples %>% filter(River %in% gw_rivers)
head(rivers)
# Save dataframe
write.table(samples, "../data/meta_pca_1254.csv", sep="\t", quote = F, row.names = F)
rivers$'GW Sample'<- FALSE
head(rivers)
rivers %>% filter(grepl("GW", Geno)) <- TRUE
filter(rivers, grepl("GW", Geno)) <- TRUE
rivers<- filter(rivers, grepl("GW", Geno)) %>% mutate('GW Sample'= TRUE)
head(rivers)
?mutate
rivers<- samples %>% filter(River %in% gw_rivers)
rivers$'GW Sample'<- FALSE
rivers<- filter(rivers, grepl("GW", Geno)) %>% mutate('GW Sample'= TRUE, .keep='all')
?grepl
grepl("GW", rivers$Geno)
rivers<- samples %>% filter(River %in% gw_rivers)
rivers$'GW Sample'<- FALSE
grepl("GW", rivers$Geno)
rivers$'GW Sample'<- grepl("GW", rivers$Geno)
head(rivers)
tail(rivers)
# Faceted Plot
rivers %>% ggplot(aes(PC1, PC2, color= 'GW Sample')) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
facet_grid(River)
# Faceted Plot
rivers %>% ggplot(aes(PC1, PC2, color= 'GW Sample')) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
facet_grid("River")
# Faceted Plot
rivers %>% ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
facet_grid("River")
?facet_grid
# Faceted Plot
rivers %>% ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
facet_grid(cols="River")
# Faceted Plot
rivers %>% ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
facet_grid(cols=River)
# Faceted Plot
rivers %>% filter(River == "Columbia") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Faceted Plot
rivers %>% filter(River == "Cowlitz") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Faceted Plot
rivers %>% filter(River == "Nisqually") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Faceted Plot
rivers %>% filter(River == "Nooksack") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Faceted Plot
rivers %>% filter(River == "Olympic Penninsula") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Faceted Plot
rivers %>% filter(River == "Pullyallup") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
gw_rivers
# Faceted Plot
rivers %>% filter(River == "Skagit") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Faceted Plot
rivers %>% filter(River == "Snoqualmie") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Faceted Plot
rivers %>% filter(River == "Willamette") %>%
ggplot(aes(PC1, PC2, color= `GW Sample`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
?geom_point
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2, color="point"), color="red", show.legend = T) +
geom_point(data=GW_will, aes(PC1, PC2, color="point"), color="skyblue", show.legend = T)
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2, color="False"), color="red", show.legend = T) +
geom_point(data=GW_will, aes(PC1, PC2, color="True"), color="skyblue", show.legend = T) +
scale_color_manual(name = "GW Samples", values = "black") +
### Plot faceted scatter for all GW river systems
# Isolate river systems of interest
gw_samples<- samples %>% filter(grepl("GW", Geno))
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2, color="False"), color="red", show.legend = T) +
geom_point(data=GW_will, aes(PC1, PC2, color="True"), color="skyblue", show.legend = T) +
scale_color_manual(name = "GW Samples", values = "black")
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2, color="False"), color="red", show.legend = T) +
geom_point(data=GW_will, aes(PC1, PC2, color="True"), color="skyblue", show.legend = T) +
scale_color_manual(name = "GW Samples", values = "black")
# PLot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2, color="False"), color="red") +
geom_point(data=GW_will, aes(PC1, PC2, color="True"), color="skyblue") +
scale_color_manual(name = "GW Samples", values = "black")
# Inspect samples with large difference
outliers<- lat_pred %>% filter(Diff> 2) %>% pull(Geno)
outliers
# Find outliers
outliers<- samples %>% filter(Geno %in% outliers)
outliers
lat_pred %>% filter(Geno == "GW-9760")
rivers
gw_rivers
# Inspect samples with large difference
outliers<- lat_pred %>% filter(Diff> 2) %>% pull(Geno)
?ifelse
outmarked<- samples %>% mutate(Outlier= if_else(Geno %in% outliers, TRUE, FALSE))
head(outmarked)
unique(outmarked$Outlier)
# Visualize PCA
# Faceted Plot
outmarked %>%
ggplot(aes(PC1, PC2, color= `Outlier`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Zoom in on outlier PCA coordinates
xmin<- outmarked %>% filter(Outlier) %>% select(PC1)
xmin
# Zoom in on outlier PCA coordinates
xmin<- outmarked %>% filter(Outlier) %>% select(PC1) %>% min()
xmin
xmax<- outmarked %>% filter(Outlier) %>% select(PC1) %>% max()
ymin<-outmarked %>% filter(Outlier) %>% select(PC2) %>% min()
ymax<- outmarked %>% filter(Outlier) %>% select(PC2) %>% max()
outmarked %>%
ggplot(aes(PC1, PC2, color= `Outlier`)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ylim(ymin, ymax) +
xlim(xmin, xmax) +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
outmarked %>%
ggplot(aes(PC1, PC2, color= Latitude)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ylim(ymin, ymax) +
xlim(xmin, xmax) +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
outmarked
outmarked %>% filter(River=="Willamette") %>%
ggplot(aes(PC1, PC2, color= Latitude)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ylim(ymin, ymax) +
xlim(xmin, xmax) +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
outmarked %>% filter(River=="Willamette") %>%
ggplot(aes(PC1, PC2, color= Outlier)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ylim(ymin, ymax) +
xlim(xmin, xmax) +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
# Plot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2, color="False"), color="red") +
geom_point(data=GW_will, aes(PC1, PC2, color="True"), color="skyblue")
GW_will
# Zoom in on outlier PCA coordinates
xmin<- GW_will %>% select(PC1) %>% min()
xmax<- GW_will %>% select(PC1) %>% max()
ymin<-GW_will %>%  select(PC2) %>% min()
ymax<- GW_will %>%  select(PC2) %>% max()
out_region<- samples %>% filter(PC1 > xmin & PC1< xmax & PC2>ymin & PC2<ymax)
out_region
out_region %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ylim(ymin, ymax) +
xlim(xmin, xmax) +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
unique(out_region$River)
out_region %>%
ggplot(aes(PC1, PC2, color=River)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ylim(ymin, ymax) +
xlim(xmin, xmax) +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
out_region<- samples %>% filter((PC1 > xmin & PC1< xmax & PC2>ymin & PC2<ymax) | River=="Willamette")
out_region %>%
ggplot(aes(PC1, PC2, color=River)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ylim(ymin, ymax) +
xlim(xmin, xmax) +
ggtitle("WGS PCA", subtitle="GW-tagged Samples")
out_region
out_region %>% group_by(River) %>% summarise(avg_lat= mean(Latitude), avg_long= mean(Longitude))
out_region %>% group_by(River) %>% summarise(avg_lat= mean(Latitude), avg_long= mean(Longitude)) %>% arrange(avg_lat)
if_else
?if_else
out_region %>% mutate(River= if_else(River=="Willamette" & grepl('GW', Geno), 'GW_Willamette', River))
out_region<- out_region %>% mutate(River= if_else(River=="Willamette" & grepl('GW', Geno), 'GW_Willamette', River))
unique(out_region$River)
out_region %>% group_by(River) %>% summarise(avg_lat= mean(Latitude), avg_long= mean(Longitude)) %>% arrange(avg_lat)
# Do predicted latitude labels more accurately reflect PCA clustering?
out_region %>% filter(River=="GW_Willamette")
# Do predicted latitude labels more accurately reflect PCA clustering?
out_region %>% filter(River=="GW_Willamette") %>% pull(Geno)
# Do predicted latitude labels more accurately reflect PCA clustering?
gw_will_id<- out_region %>% filter(River=="GW_Willamette") %>% pull(Geno)
lat_pred %>% filter(Geno %in% gw_will_id)
lat_pred %>% filter(Geno %in% gw_will_id) %>% summarise(avg_lat= mean(Prediction))
# Look at table summary of gps coordinates
out_region %>% group_by(River) %>% summarise(avg_lat= mean(Latitude), avg_long= mean(Longitude)) %>% arrange(avg_lat)
# Look at table summary of gps coordinates
out_region %>% group_by(River) %>% summarise(avg_lat= mean(Latitude), avg_long= mean(Longitude)) %>% arrange(avg_lat, avg_long)
lat_pred %>% filter(Geno %in% gw_will_id) %>% summarise(avg_lat= mean(Prediction))
out_region %>% filter(River %in% c("Skykomish", "Puyallup", "Skagit", "Nisqually"))
# Define new neighbors
new_neighbors<- out_region %>% filter(River %in% c("Skykomish", "Puyallup", "Skagit", "Nisqually")) %>% pull(Geno)
# Define new neighbors
new_neighbors<- out_region %>% filter(River %in% c("Skykomish", "Puyallup", "Skagit", "Nisqually", "Yakima")) %>% pull(Geno)
# Define new neighbors
new_neighbors<- out_region %>% filter(River %in% c("Skykomish", "Puyallup", "Skagit", "Nisqually", "Yakima")) %>% pull(Geno)
newNeigh<- samples %>% filter(Geno %in% new_neighbors)
newNeigh
# Plot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2), color="red") +
geom_point(data=GW_will, aes(PC1, PC2), color="skyblue") +
geom_point(data=newNeigh, aes(PC1, PC2), color="lightgreen")
# Plot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette GW-tagged Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2), color="red") +
geom_point(data=GW_will, aes(PC1, PC2), color="skyblue") +
geom_point(data=newNeigh, aes(PC1, PC2), color="lightgreen3")
# Plot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2), color="red") +
geom_point(data=GW_will, aes(PC1, PC2), color="skyblue") +
geom_point(data=newNeigh, aes(PC1, PC2), color="lightgreen3")
# Plot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette Samples") +
geom_point(data=nonGW_will, aes(PC1, PC2), color="red") +
geom_point(data=GW_will, aes(PC1, PC2), color="skyblue") +
geom_point(data=newNeigh, aes(PC1, PC2), color="lightgreen")
# Load data and compute difference
lat_pred<- read.csv("predict_GW/predicted_known_aligned.csv")
lat_pred <- lat_pred %>% mutate(Diff= abs(Prediction - Metadata)) %>% arrange(desc(Diff))
# Summarize distributions
lat_pred %>% summary()
# Faceted view of both latitude types
lat_pred %>% pivot_longer(cols = c(Prediction, Metadata), names_to= "Type", values_to= "Latitude" ) %>%
ggplot(aes(Latitude)) + geom_histogram(binwidth = 0.05, fill="skyblue") + facet_grid("Type") + ylab("Count") +
ggtitle("Latitude Distributions for Two Label Types")
?ggtitle
# Faceted view of both latitude types
lat_pred %>% pivot_longer(cols = c(Prediction, Metadata), names_to= "Type", values_to= "Latitude" ) %>%
ggplot(aes(Latitude)) + geom_histogram(binwidth = 0.05, fill="skyblue") + facet_grid("Type") + ylab("Count") +
ggtitle("Latitude Distributions for Two Label Types", subtitle= "Predicted for High Confidence Labels")
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Abs. Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences") +
geom_vline(xintercept=0.5785)
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Abs. Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences") +
geom_vline(xintercept=0.2401510)
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Abs. Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences", subtitle="High Confidence Labels") +
geom_vline(xintercept=0.2401510)
# Inspect samples with large difference
outliers<- lat_pred %>% filter(Diff> 1) %>% pull(Geno)
# Load PCA obj
pca<- readRDS("../../bio_findings/data/aug2021/pca/pca_noInland.RDS")
# Inspect PC %
pc.percent <- pca$varprop*100
# Create df for plotting pca
tab <- data.frame(Geno = pca$sample.id,
PC1 = pca$eigenvect[,1],
PC2 = pca$eigenvect[,2],
PC3 = pca$eigenvect[,3],
PC4 = pca$eigenvect[,4],
PC5 = pca$eigenvect[,5],
stringsAsFactors = FALSE)
# Load meta data
meta<- readRDS("../../bio_findings/data/aug2021/5class_noInland.RDS")
samples<- meta %>%
select(Geno, Latitude, Longitude, River, Class)
# Merge classes and meta
samples<- inner_join(meta, tab)
outliers
# Find outliers
outliers<- samples %>% filter(Geno %in% outliers)
outliers
# Plot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="Willamette Samples") +
geom_point(data=outliers, aes(PC1, PC2), color="red") #+
# Plot PC
samples %>%
ggplot(aes(PC1, PC2)) +
geom_point() +
ylab("PC2 (1.1% Var Explained)") +
xlab("PC1 (2.5% Var Explained)") +
ggtitle("WGS PCA", subtitle="High Confidence Label Outliers") +
geom_point(data=outliers, aes(PC1, PC2), color="red") #+
# Faceted view of both latitude types
lat_pred %>% pivot_longer(cols = c(Prediction, Metadata), names_to= "Type", values_to= "Latitude" ) %>%
ggplot(aes(Latitude)) + geom_histogram(binwidth = 0.05, fill="skyblue") + facet_grid("Type") + ylab("Count") +
ggtitle("Latitude Distributions for Two Label Types", subtitle= "Predicted for High Confidence Labels")
# Load data and compute difference
lat_pred<- read.csv("predict_GW/predicted_known_aligned.csv")
lat_pred <- lat_pred %>% mutate(Diff= Prediction - Metadata) %>% arrange(desc(Diff))
# Summarize distributions
lat_pred %>% summary()
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Abs. Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences", subtitle="High Confidence Labels") +
geom_vline(xintercept=0.2401510)
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences", subtitle="High Confidence Labels") +
geom_vline(xintercept=0.09)
# Summarize distributions
lat_pred %>% filter(Diff> -1 & Diff < 1) %>% summary()
# Load data and compute difference
lat_pred<- read.csv("predict_GW/predicted_GW_aligned.csv")
lat_pred <- lat_pred %>% mutate(Diff= Prediction - Metadata) %>% arrange(desc(Diff))
# Faceted view of both latitude types
lat_pred %>% pivot_longer(cols = c(Prediction, Metadata), names_to= "Type", values_to= "Latitude" ) %>%
ggplot(aes(Latitude)) + geom_histogram(binwidth = 0.05, fill="skyblue") + facet_grid("Type") + ylab("Count") +
ggtitle("Latitude Distributions for Two Label Types", subtitle= "Predicted for High Confidence Labels")
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences", subtitle="High Confidence Labels") +
geom_vline(xintercept=0.09)
# Summarize distributions
lat_pred  %>% summary()
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences", subtitle="High Confidence Labels") +
geom_vline(xintercept=0.41)
# Visualize difference
lat_pred %>% ggplot(aes(Diff)) + geom_histogram(binwidth=0.05, fill="red3") + ylab("Count") +
xlab("Difference between Prediction and Existing Label") + ggtitle("Distribution of Differences", subtitle="GW Labels") +
geom_vline(xintercept=0.41)
# Summarize distributions
lat_pred  %>% filter(Diff> -2 & Diff < 2) %>%summary()
# Summarize distributions
lat_pred  %>% filter(Diff> -1 & Diff < 1) %>%summary()
